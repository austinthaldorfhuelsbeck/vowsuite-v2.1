generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  agencyId      String?
  agency        Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  permissions   Permission[]
  messages      Message[]
  notifications Notification[]
  tasks         Task[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([agencyId])
}

enum Plan {
  BASIC
  PRO
  ENTERPRISE
}

model Agency {
  id              String    @id @default(uuid())
  name            String
  avatar          String
  email           String    @unique
  website         String?
  facebook        String?
  twitter         String?
  instagram       String?
  tiktok          String?
  youtube         String?
  vimeo           String?
  fontPrimary     String
  fontSecondary   String
  colorAccent     String
  colorBackground String
  colorText       String
  users           User[]
  plan            Plan
  projects        Project[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Contact {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  avatar    String?
  email     String    @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages  Message[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([projectId])
}

enum Stage {
  LEAD
  PROSPECT
  CLIENT
  COMPLETED
  ONGOING
}

model Project {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  avatar      String?
  description String
  notes       String
  agencyId    String
  agency      Agency       @relation(fields: [agencyId], references: [id])
  event       Event?
  collection  Collection?
  stage       Stage
  contacts    Contact[]
  permissions Permission[]
  messages    Message[]
  tasks       Task[]
  payments    Payment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([agencyId])
}

model Event {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  location  String
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Collection {
  id        String   @id @default(uuid())
  name      String
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

enum Role {
  ADMIN
  USER
  GUEST
}

model Permission {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
}

model Message {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
}

model Task {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String   @default("New Task")
  description String   @default("")
  dueDate     DateTime @default(now())
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}

enum Status {
  PAID
  PENDING
  FAILED
  REFUNDED
  CANCELED
}

model Payment {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  amount    Float
  date      DateTime
  status    Status?
  method    String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, read])
}

